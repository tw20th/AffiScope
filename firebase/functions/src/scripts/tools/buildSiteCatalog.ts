// firebase/functions/src/scripts/buildSiteCatalog.ts
import * as fs from "node:fs";
import * as path from "node:path";
import { getSiteConfig } from "../../lib/sites.js";

type SiteJson = {
  siteId: string;
  displayName: string;
  domain: string; // 例: "www.chairscope.com"
  brand: {
    primary: string;
    accent: string;
    logoUrl: string;
    theme: "light" | "dark";
  };
  features?: { blogs?: boolean; ranking?: boolean };
};

const ROOT = path.resolve(process.cwd(), "../../"); // monorepo ルート想定
const SITES_DIR = path.resolve(process.cwd(), "sites");
const OUT_DIR_WEB = path.join(ROOT, "apps/web");
const OUT_JSON = path.join(OUT_DIR_WEB, "site-catalog.json");
const OUT_TS = path.join(OUT_DIR_WEB, "lib/site-catalog.ts");

function main() {
  const files = fs.readdirSync(SITES_DIR).filter((f) => f.endsWith(".json"));
  const items: SiteJson[] = files.map((f) =>
    JSON.parse(fs.readFileSync(path.join(SITES_DIR, f), "utf-8"))
  );

  // 1) Web が利用する最小限のカタログ（JSON）
  const catalog = {
    generatedAt: Date.now(),
    sites: items.map((s) => ({
      siteId: s.siteId,
      displayName: s.displayName,
      domain: s.domain.toLowerCase(), // ex) "www.rakuten-bloggen1.com"
      brand: s.brand,
      features: s.features ?? {},
    })),
  };

  if (!fs.existsSync(OUT_DIR_WEB))
    fs.mkdirSync(OUT_DIR_WEB, { recursive: true });
  fs.writeFileSync(OUT_JSON, JSON.stringify(catalog, null, 2));

  // 2) 使いやすい TS 版（import で型安全に使える）
  const ts =
    `/* AUTO-GENERATED by buildSiteCatalog.ts */\n` +
    `export type Brand = { primary: string; accent: string; logoUrl: string; theme: "light"|"dark" };\n` +
    `export type SiteEntry = { siteId: string; displayName: string; domain: string; brand: Brand; features: { blogs?: boolean; ranking?: boolean } };\n` +
    `export type SiteCatalog = { generatedAt: number; sites: SiteEntry[] };\n` +
    `export const siteCatalog: SiteCatalog = ${JSON.stringify(
      catalog,
      null,
      2
    )} as const;\n` +
    `export const domainToSiteId: Record<string,string> = Object.fromEntries(siteCatalog.sites.map(s=>[s.domain, s.siteId]));\n`;
  const outDirLib = path.dirname(OUT_TS);
  if (!fs.existsSync(outDirLib)) fs.mkdirSync(outDirLib, { recursive: true });
  fs.writeFileSync(OUT_TS, ts);

  console.log(
    `✔ Generated: ${path.relative(
      process.cwd(),
      OUT_JSON
    )} & lib/site-catalog.ts`
  );
}

main();
